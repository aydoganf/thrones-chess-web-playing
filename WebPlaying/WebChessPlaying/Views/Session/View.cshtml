@{
    string socketUrl = "https://thrones-chess-socket.herokuapp.com/"; //"http://localhost:5000";
    string apiUrl = "https://thrones-chess-api.herokuapp.com/api/chess"; //"http://localhost:5005/api/chess";
    string sessionName = ViewBag.SessionName;
    string playerNickname = ViewBag.PlayerNickname;
    ViewData["Title"] = "View";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<style type="text/css">
    #console {
        font-size: 14px;
        overflow-y: auto;
        height: 640px;
        border: 1px solid #221d1d;
        background: #f3f3f3;
        margin-top: 46px;
        padding-left: 5px;
        margin-bottom: 5px;
    }

    #board td img:hover {
        cursor: pointer;
    }

    .selected-stone {
        border: 2px solid #000 !important;
    }

    .coordinate-x {
        font-size: 13px;
        vertical-align: top;
        height: 30px !important;
    }

    .coordinate-y {
        border-color: #fff !important;
        vertical-align: middle !important;
        font-size: 13px;
    }

    .board-cell {
        width: 103px;
        height: 80px;
        text-align: center
    }

    .player-nickname {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
        text-align: center;
    }

    .session-info {
        color: white;
        font-size: 28px;
        text-align: center;
        margin-bottom: 20px;
    }

    #session-warning{
        background:#ee2c08;
    }

    #session-turn {
        background: #60bf01;
    }
</style>

<h1>Chess Session</h1>
<hr />
@{
    <div class="row">
        <div class="col-md-12 session-info" id="session-warning" style="display:none;"></div>
        <div class="col-md-12 session-info" id="session-turn" style="display:none;"></div>
    </div>
    <div class="row">
        <div class="col-md-9">

            <div class="player-nickname" id="player0"></div>
            <table class="table table-bordered" id="board">

                @for (int y = 8; y > 0; y--)
                {
                    var bg = "#d18b47";


                    <tr>
                        <td class="coordinate-y">
                            @y
                        </td>
                        @for (int x = 1; x <= 8; x++)
                        {
                            bg = (y + x) % 2 == 0 ? "#d18b47" : "#ffce9e";
                            <td class="board-cell" style="background:@bg;" data-x="@x" data-y="@y"></td>
                        }
                    </tr>

                }
            </table>
            <table>
                <tr>
                    <td class="coordinate-y">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
                    <td class="board-cell coordinate-x">a</td>
                    <td class="board-cell coordinate-x">b</td>
                    <td class="board-cell coordinate-x">c</td>
                    <td class="board-cell coordinate-x">d</td>
                    <td class="board-cell coordinate-x">e</td>
                    <td class="board-cell coordinate-x">f</td>
                    <td class="board-cell coordinate-x">g</td>
                    <td class="board-cell coordinate-x">h</td>
                </tr>
            </table>
            <div class="player-nickname" id="player1"></div>
        </div>
        <div class="col-md-3">
            <div id="console" ></div>
            <div>
                <div class="input-group">
                    <input type="text" class="form-control" id="chat-text" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-secondary" id="send-chat">Chat</button>
                    </div>
                </div>
                
            </div>
        </div>
    </div>

}

<input type="hidden" id="session-name" />

<script src="~/js/socket.io.min.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script type="text/javascript">

    let socket = {};
    let player = '@playerNickname';
    let currentIndexer = 0;
    let session = null;
    let xCoordinates = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
    let checkmate = false;

    let selectedStone = {
        type: '',
        color: '',
        location: {
            x: 0,
            y: 0
        },
        assignFrom: function (stoneInfo) {
            this.type = stoneInfo.type;
            this.color = stoneInfo.color;
            this.location.x = stoneInfo.location.split('|')[0];
            this.location.y = stoneInfo.location.split('|')[1];
        },
        move: function (x, y) {

            let from = xCoordinates[this.location.x - 1] + '' + this.location.y;
            let to = xCoordinates[x - 1] + '' + y;
            let command = from + " " + to;

            $.ajax({
                url: '@apiUrl',
                contentType: 'application/json;charset=utf-8',
                dataType: 'json',
                method: 'POST',
                headers: { SessionName: '@sessionName' },
                processData: false,
                data: '{"command":"' + command + '"}',
                success: function (response) {
                    session = response;

                    if (session.movementResult.isOK) {
                        // remove current
                        selectedStone.removeCurrentLocation();
                        selectedStone.release();

                        setTurn();
                        drawTable();
                    }                    
                },
                error: function (xhr, textStatus, errorThrown) {
                    addToConsole('error occured');
                },
                complete: function (xhr, textStatus) {
                }
            });

        },
        removeCurrentLocation: function () {
            $('#board td[data-x="' + this.location.x + '"][data-y="' + this.location.y + '"] img').remove();
        },
        release: function () {
            this.type = '';
            this.color = '';
            this.location.x = 0;
            this.location.y = 0;
        }
    };


    $(document).ready(function () {

        $('#session-name').val('@sessionName');

        // #region socket
        socket = io('@socketUrl', {
            cors: {
                withCredentials: true
            }
        });

        socket.emit('join-session', '@sessionName', '@playerNickname');

        socket.on('chat-message', function (message, nickname) {
            addToConsole('<strong>' + nickname + ':</strong> ' + message);
        });

        socket.on('movement-done', function (current, next, movementResult) {

            $('#session-warning').hide();

            let commandInfo = '<strong>' + current + '</strong> oyuncusu <strong>' + movementResult.command + '</strong> oynadı.';
            addToConsole(commandInfo);

            if (movementResult.check) {
                $('#session-warning').html('Check !').show();
            }

            if (movementResult.checkmate) {

                checkmate = true;
                $('#session-warning').html('Checkmate !').show();

                let message = '<strong>' + current + '</strong> has beated the <strong>' + next + '</strong>';
                addToConsole(message);
            }

            if (movementResult.checkmate == false) {

                console.log(movementResult);
                addToConsole('Sıra <strong>' + next + '</strong> oyuncusunda.');

                if (next.toLowerCase() == '@playerNickname') {
                    $('#session-turn').html('Sıra sende !').show();
                } else {
                    $('#session-turn').hide();
                }
            }
                

            getSession();
        });

        $('#send-chat').click(function () {
            socket.emit('chat-message', '@sessionName', $('#chat-text').val(), '@playerNickname');
            $('#chat-text').val('');
        });
        // #endregion

        // #region chat
        $('#chat-text').keydown(function (e) {
            // enter
            if (e.originalEvent.keyCode === 13) {
                $('#send-chat').trigger('click');
            }

        });
        // #endregion

        // #region game session
        getSession();
        // #endregion

        $(document).on('click', '#board td img', function () {
            
            if (checkmate) {
                return;
            }

            let x = $(this).parent().data('x');
            let y = $(this).parent().data('y');

            let type = $(this).data('type');
            let color = $(this).data('color');
            let colorIndex = color === 'Black' ? 0 : 1;
            let isMyStone = player.toLowerCase() == session.players[colorIndex].nickname.toLowerCase();

            if (isMyStone) {
                // clear all selecteds
                $('.selected-stone').removeClass('selected-stone');

                // add selection to current stone
                $(this).parent().addClass('selected-stone');

                // assign selectedStone
                selectedStone.type = type;
                selectedStone.color = color;
                selectedStone.location.x = x;
                selectedStone.location.y = y;
            }
        });

        $(document).on('click', '#board td', function () {

            if (checkmate == false) {
                let x = $(this).data('x');
                let y = $(this).data('y');

                if (selectedStone.type !== '' && !(selectedStone.location.x == x && selectedStone.location.y == y)) {
                    selectedStone.move(x, y);
                }
            }
            
        });
    });


    function getSession() {
        $.ajax({
            url: '@apiUrl',
            contentType: 'application/json;charset=utf-8',
            dataType: 'json',
            method: 'GET',
            headers: { SessionName: '@sessionName' },
            success: function (data) {
                console.log(data);

                if (session == null) {

                    session = data;

                    let current = getCurrentPlayer();
                    addToConsole('Sıra <strong>' + current + '</strong> oyuncusunda.');
                }

                session = data;
                sessionCreate();
                drawTable();
            },
            error: function (xhr, textStatus, errorThrown) {
                console.log(errorThrown);
            },
            complete: function (xhr, textStatus) {
                if (textStatus === "success") {

                }
            }
        });
    }

    function setTurn() {
        socket.emit('movement-done', '@sessionName', '@playerNickname', getCurrentPlayer(), session.movementResult);
    }

    function sessionCreate() {

        $('#player0').text(session.players[0].nickname);
        $('#player1').text(session.players[1].nickname);

    }

    function getCurrentPlayer() {
        return session.players[session.currentIndexer].nickname;
    }

    function clearTable() {
        //$('#session-warning').hide();
        $('#board td img').remove();
    }

    function drawTable() {
        clearTable();

        for (var i = 0; i < session.table.stones.length; i++) {
            let stoneInfo = session.table.stones[i];

            let stoneName = stoneInfo.type.toLowerCase() + '-' + stoneInfo.color.toLowerCase();
            let icon = '/lib/icons/' + stoneName + '.png';
            let locationX = stoneInfo.location.split('|')[0];
            let locationY = stoneInfo.location.split('|')[1];

            $('#board td[data-x="' + locationX + '"][data-y="' + locationY + '"]')
                .html("<img src='" + icon + "' data-type='" + stoneInfo.type + "' data-color='" + stoneInfo.color + "' data-location='" + stoneInfo.location + "' data-stone='" + stoneName + "' />");
        }

        if (session.movementResult) {

            if (session.movementResult.location) {
                let x = session.movementResult.location.x;
                let y = session.movementResult.location.y;

                // clear all selecteds
                $('.selected-stone').removeClass('selected-stone');

                $('#board td[data-x="' + x + '"][data-y="' + y + '"]').addClass('selected-stone');
            }

        }
    }

    function addToConsole(message) {
        let now = new Date();
        let time = now.toTimeString().split(' ')[0];

        $('#console').append('<p>[' + time + ']: ' + message + '</p>');
        $('#console').append('<hr />');
    }

</script>